var k = 0,
	c = "",//一般情况下是计时器。
	n = 0,//一段时间内调用get message的数量。
	name = "",//浏览器的用户名。 客户端保存的用户名。
	key = "",//客户端保存的用户ID。
	t = 0;

//这段代码是一个名为`sockll`的JavaScript函数，它的作用是将聊天框滚动到底部。
//
// 函数内部使用了jQuery库来操作DOM元素。首先，通过选择器`".mk-chat-box"`选择了具有类名`mk-chat-box`的元素。然后，使用`scrollTop()`方法将该元素的垂直滚动条位置设置为其内容的总高度（`scrollHeight`属性）。
//
// 这样，当调用`sockll()`函数时，聊天框就会自动滚动到底部，以便用户可以看到最新的消息。

function sockll() {
	$(".mk-chat-box").scrollTop($(".mk-chat-box")[0].scrollHeight)
}

var send_btn = !0;


//这段代码是一个名为`send`的JavaScript函数，用于发送消息。以下是对代码的解析：
//
// 1. 首先，函数检查具有类名`send`的元素是否具有`disabled`类。如果具有该类，则显示一条提示信息并返回`!1`（表示函数执行失败）。
// 2. 然后，函数获取输入框`#msg`中的值，并将其存储在变量`a`中。
// 3. 如果输入框中的值为空或长度小于等于1，则函数直接返回`!1`。
// 4. 如果变量`k`等于0，将变量`t`设置为1。
// 5. 接下来，函数为具有类名`send`的元素添加`disabled`类，以禁用发送按钮。
// 6. 使用jQuery的`$.post`方法向服务器发送一个POST请求，其中包含消息内容。
// 请求的URL是`app/ajax.php?c=send`，并将消息内容作为参数传递。
// 7. 在请求的回调函数中，首先清空输入框的值。
// 然后，调用`addmsg`函数，将服务器返回的消息添加到聊天框中，并指定消息的方向为右方。
// 8. 使用`setTimeout`函数设置一个延时器，延迟3秒后移除发送按钮的`disabled`类。
// 9. 清除定时器`c`，并重新设置一个新的定时器，每隔1秒调用一次`get_msg`函数，以获取新的消息。
//
// 请注意，这段代码中使用了jQuery库来操作DOM元素和发送HTTP请求。

function send() {
	//"发言太快，间隔为3秒！"
	if ($("#send").hasClass("disabled")) return addtip("\u53d1\u8a00\u592a\u5feb\uff0c\u95f4\u9694\u4e3a3\u79d2\uff01", "tips-info"), !1;
	var a = $("#msg").val();
	if (1 > a.length) return !1;
	0 == k && (t = 1);
	$("#send").addClass("disabled");
	$.post("app/ajax.php?c=send", {
		msg: a
	},
		function(a) {
		$("#msg").val("");
		addmsg(a.name, a.msg, "right");

		setTimeout(function() {
			$("#send").removeClass("disabled")
		}, 3E3);

		window.clearInterval(c);
		n = 0;
		c =  setInterval(function() {
			get_msg()
		}, 1E3)

	}, "json")
}


//这段代码是一个名为`addtip`的JavaScript函数，它接受两个参数`a`和`b`。
// 该函数的作用是在具有类名`mk-chat-box`的元素中添加一个新的`div`元素，并设置其样式和内容。
// 具体来说，函数执行以下操作：
// 1. 使用jQuery选择器`$(".mk-chat-box")`选中具有类名`mk-chat-box`的元素。
// 2. 使用`append()`方法在该元素内部添加一个新的`div`元素。
// 3. 为新添加的`div`元素设置一个类名`tips`。
// 4. 在新的`div`元素内部添加一个`span`元素，并设置其类名为参数`b`的值。
// 5. 将参数`a`的值设置为`span`元素的文本内容。
// 6. 调用`sockll()`函数，可能是用于滚动聊天框到底部的操作。
//
// 请注意，这段代码中使用了jQuery库来操作DOM元素和发送HTTP请求。
function addtip(a, b) {
	$(".mk-chat-box").append('<div class="tips"><span class="' + b + '">' + a + "</span></div>");
	sockll()
}


// 这段代码是一个名为`addmsg`的JavaScript函数，它接受三个参数`a`、`b`和`f`。该函数的作用是在具有类名`mk-chat-box`的元素中添加一个新的消息，并设置其样式和内容。
//
// 具体来说，函数执行以下操作：
// 1. 调用`LetterAvatar(a, 32)`函数生成一个头像图片，并将其赋值给变量`g`。
// 2. 使用jQuery选择器`$(".mk-chat-box")`选中具有类名`mk-chat-box`的元素。
// 3. 在该元素内部添加一个新的`div`元素，并设置其类名为参数`f`的值。
// 4. 在新的`div`元素内部添加一个`img`元素，并设置其类名为"head"。
// 5. 在新的`div`元素内部添加一个`span`元素，用于显示用户名，并设置其类名为"name"，文本内容为参数`a`的值。
// 6. 在新的`div`元素内部添加另一个`span`元素，用于显示消息内容，并设置其类名为"content"，文本内容为参数`b`的值。
// 7. 调用`sockll()`函数，可能是用于滚动聊天框到底部的操作。
//
// 请注意，这段代码中使用了jQuery库来操作DOM元素和发送HTTP请求。
function addmsg(a, b, f) {
	var g = LetterAvatar(a, 32);
	$(".mk-chat-box").append('<div class="' + f + ' msg"><img class="head" src="' + g + '" /><span class="name">' + a + '</span><span class="content">' + b + "</span></div>");
	sockll()
}
//该函数的主要功能是获取聊天消息并将其显示在聊天框中。
// 它通过调用$.getJSON()方法从服务器获取数据，然后根据返回的数据进行处理和显示。
// 首先，函数会检查变量n的值，如果大于等于90，则会清除定时器c并重新设置一个新的定时器，
// 每隔1E4毫秒（即1秒）调用get_msg()函数。这样可以在一定时间后自动刷新聊天框的内容。
// 接下来，如果n大于等于150，则会执行一些额外的操作。
// 它会移除ID为tips的元素，并在聊天框中添加一个提示信息，告知用户无法获取新的消息，并提供一个链接来刷新页面以获取新的消息。
// 然后，函数使用$.getJSON()方法向服务器发送请求，获取聊天消息的数据。
// 请求的URL是app/ajax.php?c=msg&k=加上变量k的值。请求成功后，会执行回调函数。
// 在回调函数中，首先定义了一个空字符串b和一个数组f，
// 分别用于存储处理后的聊天消息内容和原始消息列表。然后，将返回的计数值赋给变量a。
// 接下来，使用一个循环遍历原始消息列表f。
// 对于每个消息，首先使用jQuery.parseJSON()方法将其解析为JSON对象。
// 然后根据消息的类型和关键字进行不同的处理。
// 如果消息类型为"sys"且消息内容为"rebot"，则表示系统机器人发送了一条消息。
// 此时，将变量k设置为0，并在聊天框中添加一条提示信息，表示系统机器人已上线。
// 如果消息关键字与变量key相等，并且满足其他条件（例如k大于0或t等于1），
// 则在控制台输出日志，并将变量k设置为返回的计数值。
// 否则，根据消息关键字是否与变量key相等，确定消息的显示方向（左侧或右侧）。
// 然后，使用LetterAvatar()函数生成头像图片，并将其添加到消息的HTML元素中。
// 最后，将处理后的消息内容添加到字符串b中。
// 在循环结束后，如果字符串b不为空，则将变量k设置为返回的计数值，并将处理后的消息内容添加到聊天框中。
// 最后，调用sockll()函数来滚动聊天框到底部。
// 总之，这段代码实现了一个获取聊天消息并显示在聊天框中的函数，
// 包括定时刷新、系统消息提示以及根据关键字过滤和显示不同类型的消息等功能。
function get_msg() {
	n++;
	90 < n && (window.clearInterval(c), c = setInterval(function() {
		get_msg()
	}, 1E4));
	//'<div class="tips" id="tips"><span class="tips-danger">长时间未收到消息，<a id="fresh" href="javascript:;">点击继续收取</a></span></div>'
	150 < n && (window.clearInterval(c), $("#tips").remove(), $(".mk-chat-box").append('<div class="tips" id="tips"><span class="tips-danger">\u957f\u65f6\u95f4\u672a\u6536\u5230\u6d88\u606f\uff0c<a id="fresh" href="javascript:;">\u70b9\u51fb\u7ee7\u7eed\u6536\u53d6</a></span></div>'), sockll());
//这段代码是一个使用jQuery的Ajax请求来获取JSON数据并处理的示例。
// 它通过调用`$.getJSON()`方法向服务器发送一个GET请求，请求的URL是"app/ajax.php?c=msg&k="加上变量k的值。

// 在请求成功后，会执行一个回调函数，该函数接收一个参数a，表示从服务器返回的数据。
// 在回调函数内部，首先定义了一个空字符串b和一个变量f，将a.list赋值给f。
// 然后，将a.count赋值给变量a。
// 接下来，使用for循环遍历f数组中的每个元素。
// 在循环内部，使用jQuery的`parseJSON()`方法将当前元素转换为JSON对象，并将其赋值给变量d。
// 然后，根据d的类型和消息内容进行不同的处理。
// 如果d的类型为"sys"且消息内容为"rebot"，
// 则将k设置为0，并将一个新的提示信息添加到ID为"mk-chat-box"的元素中。
// 否则，将d的消息内容添加到字符串b中。
// 如果d的key等于变量key且满足其他条件（k大于0或t等于1），则在控制台输出t的值，并将k设置为a的值。
// 对于其他情况，根据d的key是否等于变量key来设置变量e的值为"left"或"right"。
//  然后，使用LetterAvatar函数生成一个头像图片，并将其赋值给变量l。
// 接着，将包含头像、用户名、消息内容的HTML代码添加到字符串b中。
// 最后，如果字符串b不为空，则将k设置为a的值，并将字符串b添加到ID为"mk-chat-box"的元素中。
// 然后，调用sockll()函数。
// 这段代码的主要作用是通过Ajax请求获取聊天消息，并根据消息类型和内容进行处理和显示。
	 $.getJSON("app/ajax.php?c=msg&k=" + k,
		  function(a) {
		var b = "",
			f = a.list;
		a = a.count;
		for (var g = 0, h = f.length; g < h; g++) {
			var d = jQuery.parseJSON(f[g]);
			if ("sys" == d.type)"rebot" == d.msg ? (k = 0, $(".mk-chat-box").html('<div class="tips"><span class="tips-success">\u804a\u5929\u7cfb\u7edf\u5237\u65b0</span></div>')) : b += '<div class="tips">' + d.msg + "</div>";
			else if (d.key == key && (0 < k || 1 == t)) console.log(t), k = a;
			else {
				var e = "left";
				d.key == key && (e = "right");
				var l = LetterAvatar(d.name, 32);
				b += '<div class="' + e + ' msg"><img class="head" src="' + l + '" /><span class="name">' + d.name + '</span><span class="content">' + d.msg + "</span></div>"
			}
		}
		"" != b && (k = a, $(".mk-chat-box").append(b), sockll())
	})
}




//这段代码是一个名为login的函数，它接受一个参数n。
// 该函数使用jQuery的$.get()方法向服务器发送一个GET请求，
// 请求的URL是"app/ajax.php?c=login"，并传递了一个包含参数n的对象作为查询字符串。
// 在请求成功后，回调函数被调用，并将返回的数据赋值给变量a。
// 然后，从返回的数据中提取name和key属性的值，并将它们分别赋值给全局变量name和key。
// 接下来，调用了两个函数：get_msg()和sockll()。
// 最后，使用setInterval()方法设置一个定时器，每隔1秒（1E3毫秒）执行一次get_msg()函数。
// 这意味着每隔1秒，都会向服务器发送一个新的请求以获取新的消息。
function login(n){
	$.get("app/ajax.php?c=login",{'n':n},function(a) {
		name = a.name;
		key = a.key;
		get_msg();
		sockll()
	}, "json");

	c = setInterval(function() {
		get_msg()
	}, 1E3);

}




//这段代码是一个使用jQuery编写的聊天应用的前端部分。
// 它包含了以下功能：

// 1. 当页面加载完成后，检查是否存在一个名为"login"的元素。
// 如果不存在，则调用`login()`函数进行登录操作。
// 如果存在，则隐藏名为"talk"的元素，并绑定点击事件到ID为"login"的元素上。
// 当用户点击该元素时，获取用户输入的昵称（通过ID为"nick"的元素），
// 如果昵称不为空，则隐藏"login"元素，显示"talk"元素，并调用`login(n)`函数进行登录操作。
// 2. 当用户在ID为"msg"的元素中按下回车键时，调用`send()`函数发送消息，并阻止默认行为。
// 3. 当用户点击ID为"fresh"的元素时，清除定时器`c`，
// 将变量`n`设置为0，
// 移除ID为"tips"的元素，并在ID为"mk-chat-box"的元素中添加一个新的提示信息元素。
// 然后调用`sockll()`函数进行一些初始化操作，
// 并重新设置定时器`c`，每隔1秒调用一次`get_msg()`函数获取新的消息。

// 这段代码可能是一个基于WebSocket的实时聊天应用的一部分，用于处理用户的登录、发送消息和接收消息等功能。
$(document).ready(function() {
	if($('.login').length == 0){
       login();
    }else{
	  $('.talk').hide();
	  $('#login').on("click", function() {
		 var n = $('#nick').val();
		 if(n!=''){
             $('.login').hide();
			 $('.talk').show();
             login(n);
			 //location.reload();
		 }
	  });
	}
	$("#msg").on("keypress", function(a) {
		if (13 == a.keyCode) return send(), !1
	});

	$(".mk-chat-box").on("click", "#fresh", function() {
		window.clearInterval(c);
		n = 0;
		$("#tips").remove();
		//操作成功
		$(".mk-chat-box").append('<div class="tips"><span>\u64cd\u4f5c\u6210\u529f</span></div>');
		sockll();
		c = setInterval(function() {
			get_msg()
		}, 1E3)
	})


});


//这段代码是一个名为`LetterAvatar`的函数，用于生成一个字母头像。它接受三个参数：
//
// 1. `a`：要显示在头像上的字符串或字符。如果未提供，则默认为空字符串。
// 2. `b`：头像的宽度（以像素为单位）。如果未提供，则默认为60像素。
// 3. `f`：头像的背景颜色。如果未提供，则使用预定义的颜色数组中的颜色。
//
// 函数首先将背景颜色数组赋值给变量`g`，然后将输入的字符串或字符转换为小写并分割成单个字符。接着，根据字符的Unicode编码计算其在颜色数组中的索引，并获取对应的颜色值。然后，创建一个指定宽度和高度的画布元素，并获取其2D绘图上下文。
//
// 接下来，函数设置填充样式为计算出的颜色值，并在画布上绘制一个矩形。然后，设置字体样式为居中对齐，并使用白色文本填充头像中间位置的文本。最后，将画布转换为DataURL格式并返回。
//
// 这个函数可以用于生成个性化的字母头像，例如在社交媒体网站上展示用户的头像。
function LetterAvatar(a, b, f) {
	b = b || 60;
	var g = "#1abc9c #2ecc71 #3498db #9b59b6 #34495e #16a085 #27ae60 #2980b9 #8e44ad #2c3e50 #f1c40f #e67e22 #e74c3c #00bcd4 #95a5a6 #f39c12 #d35400 #c0392b #bdc3c7 #7f8c8d".split(" ");
	a = String(a || "").split(" ");
	a = 1 == a.length ? a[0] ? a[0].charAt(0) : "?" : a[0].charAt(0) + a[1].charAt(0);
	window.devicePixelRatio && (b *= window.devicePixelRatio);
	var h = (("?" == a ? 72 : a.charCodeAt(0)) - 64) % 20;
	var d = document.createElement("canvas");
	d.width = b;
	d.height = b;
	var e = d.getContext("2d");
	e.fillStyle = f ? f : g[h - 1];
	e.fillRect(0, 0, d.width, d.height);
	e.font = Math.round(d.width / 2) + "px 'Microsoft Yahei'";
	e.textAlign = "center";
	e.fillStyle = "#FFF";
	e.fillText(a, b / 2, b / 1.5);
	return d.toDataURL()
};